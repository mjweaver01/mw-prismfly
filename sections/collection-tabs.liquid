<style>
  #shopify-section-{{ section.id }} .tabbed-collections {
    padding: 1em 0;
  }

  #shopify-section-{{ section.id }} .tabbed-collection-links {
    display: none;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    border-top: 1px solid var(--gradient-base-background-2);
    border-bottom: 1px solid var(--gradient-base-background-2);
  }

  #shopify-section-{{ section.id }} .collection-link {
    position: relative;
    padding: 1em;
    margin: 0;
    text-align: center;
    cursor: pointer;
    color: var(--litepicker-button-prev-month-color);
  }

  #shopify-section-{{ section.id }} .collection-link:hover,
  #shopify-section-{{ section.id }} .collection-link.active {
    color: var(--gradient-base-accent-1);
  }

  #shopify-section-{{ section.id }} .collection-link:hover:after,
  #shopify-section-{{ section.id }} .collection-link.active:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--gradient-base-accent-1);
  }

  @media screen and (min-width: 750px) {
    #shopify-section-{{ section.id }} .tabbed-collection-links {
      display: flex;
    }

    #shopify-section-{{ section.id }} .tabbed-select-wrapper {
      display: none;
    }
  }
</style>

<div class="page-width">
  <div id="tabbedCollections" class="tabbed-collections" data-id="{{ section.id }}">
    <div class="select tabbed-select-wrapper">
      <select name="tcSelect" class="select__select caption-large" id="tcSelect">
        {% for block in section.blocks %}
          <option {% if collection.title == block.settings.collection.title %} selected{% endif %} value="/collections/{{ collections[block.settings.collection].handle }}">
            {{ collections[block.settings.collection].title }}
          </option>
        {% endfor %}
      </select>
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-caret" viewBox="0 0 10 6">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor"></path> 
      </svg>
    </div>
  
    <div class="tabbed-collection-links">
      {% for block in section.blocks %}
        <div class="collection-link-outer">
          <h4
            data-link="/collections/{{ collections[block.settings.collection].handle }}" 
            class="collection-link{% if collection.title == block.settings.collection.title %} active{% endif %}"
          >{{ collections[block.settings.collection].title }}</h4>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<script>
  function renderPage(sentURL) {
    const sections = [
      document.getElementById('collection-banner'),
      document.getElementById('main-product-grid')
    ]
    const countContainer = document.getElementById('ProductCount');
    const countContainerDesktop = document.getElementById('ProductCountDesktop');

    document.getElementById('ProductGridContainer').querySelector('.collection').classList.add('loading');
    if (countContainer) countContainer.classList.add('loading');
    if (countContainerDesktop) countContainerDesktop.classList.add('loading');

    sections.forEach(async (section) => {
      const url = `${sentURL}?section_id=${section.dataset.id}`;
      await fetch(url)
        .then(response => response.text())
        .then((responseText) => {
          const html = responseText;
          const parsedString = new DOMParser().parseFromString(html, 'text/html')
          document.getElementById(section.id).innerHTML = parsedString.getElementById(section.id).innerHTML;
        });
    })

    history.pushState({}, '', sentURL);

    var popStateEvent = new PopStateEvent('popstate', {});
    dispatchEvent(popStateEvent);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const collectionLinks = document.querySelectorAll('#shopify-section-{{ section.id }} .collection-link')
    collectionLinks.forEach((el, index) => {
      el.addEventListener('click', (event) => {
        collectionLinks.forEach((elem) => { 
          elem.classList.remove('active') 
        });

        el.classList.add('active')
        renderPage(el.dataset.link)
      });
    });

    const tcSelect = document.getElementById('tcSelect')
    tcSelect.addEventListener('change', (e) => {
      renderPage(e.target.value)
    });
  });
</script>

{% schema %}
  {
    "name": "Tabbed Collections",
    "class": "tabbed-collections",
    "templates": ["collection"],
    "settings": [],
    "blocks": [
      {
        "type": "collection",
        "name": "Collection",
        "settings": [
          {
            "id": "collection",
            "type": "collection",
            "label": "Collection"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Tabbed Collections",
        "blocks": []
      }
    ]
  }
{% endschema %}
